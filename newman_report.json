{
  "collection": {
    "_": {
      "postman_id": "02b56875-d067-418d-9bd2-f13efb822016",
      "exporter_id": "38999135",
      "collection_link": "https://www.postman.com/rsdolly03/workspace/hotel-booking-api-testing/collection/38999135-02b56875-d067-418d-9bd2-f13efb822016?action=share&source=collection_link&creator=38999135"
    },
    "item": [
      {
        "id": "d858b455-a32a-49e4-bf24-b2f776176a73",
        "name": "POST Auth - Generate Token",
        "request": {
          "url": {
            "path": [
              "auth"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1a8969bb-e09e-488c-9763-c363db8a3b86",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//Parse JSON response\r",
                "var jsonData = pm.response.json();\r",
                "\r",
                "//T1: Status code\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//T2: Response time\r",
                "pm.test(\"Response time is below 500ms\", function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});\r",
                "\r",
                "let metrics = {\r",
                "    time: pm.response.responseTime,\r",
                "    size: pm.response.responseSize\r",
                "};\r",
                "console.log(\"Performance metrics:\", metrics);\r",
                "\r",
                "//T3: Token exists and is not empty\r",
                "pm.test(\"Token is present\", function () {\r",
                "    pm.expect(jsonData.token).to.not.be.undefined;\r",
                "    pm.expect(jsonData.token).to.not.be.empty;\r",
                "});\r",
                "\r",
                "//T4: Content type is JSON\r",
                "pm.test(\"Content-Type contains application/json\", function () {\r",
                "    const contentType = pm.response.headers.get(\"Content-Type\");\r",
                "    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
                "});\r",
                "\r",
                "// T5: Save token to environment variable\r",
                "if (jsonData.token) {\r",
                "    pm.environment.set(\"token\", jsonData.token);\r",
                "}\r",
                ""
              ],
              "_lastExecutionId": "5a7a2fce-86ab-4101-83c0-a1d9fe8856f8"
            }
          }
        ]
      },
      {
        "id": "d81a405b-e0d6-476d-8f18-27f0c8b07b46",
        "name": "POST Auth - Invalid Credentials",
        "request": {
          "url": {
            "path": [
              "auth"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "55f95ae9-7624-49f9-b1d2-96d2b47fa4ee",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "var jsonData = pm.response.json();\r",
                "\r",
                "// ‚ùå Expect 200 but with error message (API design choice)\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "pm.test(\"Reason key exists and is 'Bad credentials'\", function () {\r",
                "    pm.expect(jsonData.reason).to.eql(\"Bad credentials\");\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "123367b4-076c-42f7-9861-275974203869"
            }
          }
        ]
      },
      {
        "id": "01f5d0e1-09c6-43a7-b3ad-c58ec1cac88f",
        "name": "Create booking",
        "request": {
          "url": {
            "path": [
              "booking"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token={{token}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "281d5f55-ae0b-408e-b072-bff6b12a22d9",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Parse the response\r",
                "let res = pm.response.json();\r",
                "\r",
                "//Keep array of all booking IDs\r",
                "let bookings = pm.environment.get(\"bookingIds\");\r",
                "bookings = bookings ? JSON.parse(bookings) : [];\r",
                "\r",
                "// Push new booking object into array\r",
                "bookings.push({ bookingid: res.bookingid});\r",
                "\r",
                "// Save updated array back to environment\r",
                "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                "\r",
                "// Also save the single booking ID for chaining\r",
                "pm.environment.set(\"bookingId\", res.bookingid);\r",
                "\r",
                "// Tests\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "pm.test(\"Response contains bookingid\", function () {\r",
                "    pm.expect(res).to.have.property(\"bookingid\");\r",
                "});\r",
                "\r",
                "pm.test(\"Firstname matches request\", function () {\r",
                "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                "});\r",
                "\r",
                "//Response time\r",
                "pm.test(\"Response time is below 500ms\", function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});\r",
                "\r",
                "let metrics = {\r",
                "    time: pm.response.responseTime,\r",
                "    size: pm.response.responseSize\r",
                "};\r",
                "console.log(\"Performance metrics:\", metrics);\r",
                ""
              ],
              "_lastExecutionId": "adec3f86-3651-4ec6-88d5-35f84d7f7d66"
            }
          }
        ]
      },
      {
        "id": "4347c6ec-8344-4154-bb8f-bba9316f8b2e",
        "name": "Update booking",
        "request": {
          "url": {
            "path": [
              "booking",
              "{{bookingId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Cookie",
              "value": "token={{token}}"
            },
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\": \"Raj\",\r\n    \"lastname\": \"Malhotra\",\r\n    \"totalprice\": 5000,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-11-01\",\r\n        \"checkout\": \"2025-11-10\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "54ee7399-68e2-44cb-bd95-875732737b4e",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "let jsonData;\r",
                "try {\r",
                "    jsonData = pm.response.json();\r",
                "} catch (e) {\r",
                "    pm.test(\"Response is valid JSON\", function () {\r",
                "        pm.expect.fail(\"Invalid JSON in response\");\r",
                "    });\r",
                "}\r",
                "\r",
                "//Status code check\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "//Compare response to request (if body exists)\r",
                "if (pm.request.body && pm.request.body.raw) {\r",
                "    let requestData;\r",
                "    try {\r",
                "        requestData = JSON.parse(pm.request.body.raw);\r",
                "    } catch (e) {\r",
                "        pm.test(\"Request body is valid JSON\", function () {\r",
                "            pm.expect.fail(\"Invalid JSON in request body\");\r",
                "        });\r",
                "    }\r",
                "\r",
                "    pm.test(\"Booking updated matches request\", function () {\r",
                "        pm.expect(jsonData.firstname).to.eql(requestData.firstname);\r",
                "        pm.expect(jsonData.lastname).to.eql(requestData.lastname);\r",
                "        pm.expect(jsonData.totalprice).to.eql(requestData.totalprice);\r",
                "    });\r",
                "}\r",
                "\r",
                "//Direct firstname check without undefined variable\r",
                "pm.test(\"Firstname matches 'Raj'\", function () {\r",
                "    pm.expect(jsonData.firstname).to.eql(\"Raj\");\r",
                "});\r",
                "\r",
                "//Response time check\r",
                "pm.test(\"Response time is below 500ms\", function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});\r",
                "\r",
                "//Performance metrics logging\r",
                "let metrics = {\r",
                "    time: pm.response.responseTime,\r",
                "    size: pm.response.responseSize\r",
                "};\r",
                "console.log(\"Performance metrics:\", metrics);\r",
                ""
              ],
              "_lastExecutionId": "9bdfd8e1-afa3-4ecb-96bf-2f38cf05d5eb"
            }
          }
        ]
      },
      {
        "id": "409f2982-ff7e-40e6-9137-d9fc3c37b94d",
        "name": "Get All Bookings",
        "request": {
          "url": {
            "path": [
              "booking",
              "{{bookingId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e75d3734-5582-4dd6-92dc-fc3905d59420",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Get bookingId from environment\r",
                "let bookingId = pm.environment.get(\"bookingId\");\r",
                "\r",
                "pm.test(\"Booking ID exists\", () => {\r",
                "    pm.expect(bookingId).to.not.be.undefined;\r",
                "    pm.expect(bookingId).to.not.be.null;\r",
                "});\r",
                "\r",
                "// Status code check\r",
                "pm.test(\"Status code is 200\", () => {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "// Response time check\r",
                "pm.test(\"Response time <500ms\", () => {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});\r",
                "\r",
                "let metrics = {\r",
                "    time: pm.response.responseTime,\r",
                "    size: pm.response.responseSize\r",
                "};\r",
                "console.log(\"Performance metrics:\", metrics);\r",
                "\r",
                "// Parse JSON\r",
                "let jsonData = pm.response.json();\r",
                "\r",
                "// Validate booking object\r",
                "pm.test(\"Has all booking fields\", () => {\r",
                "    pm.expect(jsonData).to.have.keys(\r",
                "        \"firstname\",\r",
                "        \"lastname\",\r",
                "        \"totalprice\",\r",
                "        \"depositpaid\",\r",
                "        \"bookingdates\",\r",
                "        \"additionalneeds\"\r",
                "    );\r",
                "});\r",
                "\r",
                "// Validate bookingdates keys\r",
                "pm.test(\"Booking dates contain checkin & checkout\", () => {\r",
                "    pm.expect(jsonData.bookingdates).to.have.keys(\"checkin\", \"checkout\");\r",
                "});\r",
                "\r",
                "// Save booking details for later\r",
                "pm.environment.set(\"bookingDetails\", JSON.stringify(jsonData));\r",
                ""
              ],
              "_lastExecutionId": "33f8e3ae-fd22-4f8f-8f42-6ab492bef545"
            }
          }
        ]
      },
      {
        "id": "6569eba3-2448-4f9d-8224-ee18af3b4cb4",
        "name": "Delete Request",
        "request": {
          "url": {
            "path": [
              "booking",
              "{{bookingId}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token={{token}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a4a304c7-6ac6-4095-b3cf-3d149acae6d6",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Convert response body to JSON if possible\r",
                "let responseJson;\r",
                "try {\r",
                "    responseJson = pm.response.json();\r",
                "} catch (e) {\r",
                "    responseJson = {};\r",
                "}\r",
                "\r",
                "// ‚úÖ Test: Status code is valid (DELETE expected codes)\r",
                "pm.test(\"Status code is 200, 201, 204\", function () {\r",
                "    pm.expect([200, 201, 204]).to.include(pm.response.code);\r",
                "});\r",
                "\r",
                "// ‚úÖ Test: Response body is valid for DELETE\r",
                "pm.test(\"Response is valid for DELETE\", function () {\r",
                "    const validBodies = [\"\",\"Created\", \"No Content\"];\r",
                "    pm.expect(validBodies).to.include(pm.response.reason());\r",
                "});\r",
                "\r",
                "// ‚úÖ Test: Booking actually deleted (if status is success)\r",
                "pm.test(\"Booking deletion confirmation\", function () {\r",
                "    if ([200, 201, 204].includes(pm.response.code)) {\r",
                "        pm.expect(pm.response.text()).to.include.oneOf([\"Created\", \"Deleted\", \"No Content\", \"Booking deleted\"]);\r",
                "    }\r",
                "});\r",
                "\r",
                "// ‚úÖ Save deletion status for later\r",
                "pm.collectionVariables.set(\"lastDeleteStatus\", pm.response.code);\r",
                ""
              ],
              "_lastExecutionId": "de645924-3fff-497d-98ce-fb26cd31e56a"
            }
          }
        ]
      },
      {
        "id": "1430c6f6-393f-4f3b-bba8-fd51d33f97f1",
        "name": "Create booking again",
        "request": {
          "url": {
            "path": [
              "booking"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "00970117-e695-4ff6-baaf-1e326fc21a6c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "// Parse the response\r",
                "let res = pm.response.json();\r",
                "\r",
                "//Keep array of all booking IDs\r",
                "let bookings = pm.environment.get(\"bookingIds\");\r",
                "bookings = bookings ? JSON.parse(bookings) : [];\r",
                "\r",
                "// Push new booking object into array\r",
                "bookings.push({ bookingid: res.bookingid});\r",
                "\r",
                "// Save updated array back to environment\r",
                "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                "\r",
                "//Also save the single booking ID for chaining\r",
                "pm.environment.set(\"bookingId\", res.bookingid);\r",
                "\r",
                "// Tests\r",
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "\r",
                "pm.test(\"Response contains bookingid\", function () {\r",
                "    pm.expect(res).to.have.property(\"bookingid\");\r",
                "});\r",
                "\r",
                "pm.test(\"Firstname matches request\", function () {\r",
                "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                "});\r",
                "\r",
                "//Response time\r",
                "pm.test(\"Response time is below 500ms\", function () {\r",
                "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                "});\r",
                "\r",
                "let metrics = {\r",
                "    time: pm.response.responseTime,\r",
                "    size: pm.response.responseSize\r",
                "};\r",
                "console.log(\"Performance metrics:\", metrics);\r",
                ""
              ],
              "_lastExecutionId": "7bba4030-0552-4ce2-8b5b-54ee3e054dac"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "",
        "key": "lastDeleteStatus"
      }
    ],
    "info": {
      "_postman_id": "02b56875-d067-418d-9bd2-f13efb822016",
      "name": "Restful Booker Test Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "API Test Suite for Hotel Booking System using Restful Booker API.  \nCovers authentication, CRUD operations, error handling, and performance checks.",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-08-30T17:59:21.649Z",
      "postman_exported_using": "Postman/11.60.4"
    },
    "id": "bff29581-e4e3-4df4-a472-9f6cdfe29873",
    "name": "Restful booker Env",
    "values": [
      {
        "type": "any",
        "value": "https://restful-booker.herokuapp.com",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "admin",
        "key": "username"
      },
      {
        "type": "any",
        "value": "password123",
        "key": "password"
      },
      {
        "type": "any",
        "value": "ef24ee8e0844918",
        "key": "token"
      },
      {
        "type": "any",
        "value": 2764,
        "key": "bookingId"
      },
      {
        "type": "any",
        "value": "[{\"bookingid\":2741},{\"bookingid\":2764}]",
        "key": "bookingIds"
      },
      {
        "type": "any",
        "value": "{\"firstname\":\"Raj\",\"lastname\":\"Malhotra\",\"totalprice\":5000,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2025-11-01\",\"checkout\":\"2025-11-10\"},\"additionalneeds\":\"Dinner\"}",
        "key": "bookingDetails"
      }
    ]
  },
  "globals": {
    "id": "7405153e-bdb3-45b3-a0a7-e6c88c8ddfb8",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 26,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 7,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 561.1428571428571,
      "responseMin": 235,
      "responseMax": 1515,
      "responseSd": 442.8116105625276,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756581379037,
      "completed": 1756581383551
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 7,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0dd60d16-ca21-4e14-a0d9-a6dcf64297fb",
          "httpRequestId": "8c3f99b2-3333-4890-9231-86c8a2c1bebd"
        },
        "item": {
          "id": "d858b455-a32a-49e4-bf24-b2f776176a73",
          "name": "POST Auth - Generate Token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8969bb-e09e-488c-9763-c363db8a3b86",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//Parse JSON response\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "//T1: Status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//T2: Response time\r",
                  "pm.test(\"Response time is below 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  "\r",
                  "//T3: Token exists and is not empty\r",
                  "pm.test(\"Token is present\", function () {\r",
                  "    pm.expect(jsonData.token).to.not.be.undefined;\r",
                  "    pm.expect(jsonData.token).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "//T4: Content type is JSON\r",
                  "pm.test(\"Content-Type contains application/json\", function () {\r",
                  "    const contentType = pm.response.headers.get(\"Content-Type\");\r",
                  "    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// T5: Save token to environment variable\r",
                  "if (jsonData.token) {\r",
                  "    pm.environment.set(\"token\", jsonData.token);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "5a7a2fce-86ab-4101-83c0-a1d9fe8856f8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f5e9ff1e-26eb-4c84-9e4e-63cde91d6296",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "61",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6a6e83ad-291e-47ad-81ca-633c59d87023",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Length",
              "value": "27"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:21 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"1b-or3ZSsDt+8HyGka+98P7iHA2we4\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=vqZupPrbCGjpZNze08AJheElCyPeeTEk7MS33gpJgM8%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581381\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=vqZupPrbCGjpZNze08AJheElCyPeeTEk7MS33gpJgM8%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581381\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              102,
              50,
              52,
              101,
              101,
              56,
              101,
              48,
              56,
              52,
              52,
              57,
              49,
              56,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1515,
          "responseSize": 27
        },
        "id": "d858b455-a32a-49e4-bf24-b2f776176a73",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is below 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is below 500ms",
              "message": "expected 1515 to be below 500",
              "stack": "AssertionError: expected 1515 to be below 500\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Token is present",
            "skipped": false
          },
          {
            "assertion": "Content-Type contains application/json",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e4b60b6-c190-4bb8-b4b0-b7fda62dc920",
          "length": 7,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fc01d5bb-12f5-4dcf-bbfb-22f7d09932d5"
        },
        "item": {
          "id": "d81a405b-e0d6-476d-8f18-27f0c8b07b46",
          "name": "POST Auth - Invalid Credentials",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "55f95ae9-7624-49f9-b1d2-96d2b47fa4ee",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "// ‚ùå Expect 200 but with error message (API design choice)\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Reason key exists and is 'Bad credentials'\", function () {\r",
                  "    pm.expect(jsonData.reason).to.eql(\"Bad credentials\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "123367b4-076c-42f7-9861-275974203869"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7f30af15-ca15-4ebf-9668-0df2d103b980",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "55",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e5368e19-9f0c-4b40-90b0-c585cea6e55e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:21 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"1c-J3EiwfZwVQjKTKvpvazUfTni8fI\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=vqZupPrbCGjpZNze08AJheElCyPeeTEk7MS33gpJgM8%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581381\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=vqZupPrbCGjpZNze08AJheElCyPeeTEk7MS33gpJgM8%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581381\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              114,
              101,
              97,
              115,
              111,
              110,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 235,
          "responseSize": 28
        },
        "id": "d81a405b-e0d6-476d-8f18-27f0c8b07b46",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Reason key exists and is 'Bad credentials'",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e1adb504-4743-48bd-92a4-0604de198045",
          "length": 7,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "03e0433e-d80a-49b3-8e4c-bca4f6baa677"
        },
        "item": {
          "id": "01f5d0e1-09c6-43a7-b3ad-c58ec1cac88f",
          "name": "Create booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "281d5f55-ae0b-408e-b072-bff6b12a22d9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the response\r",
                  "let res = pm.response.json();\r",
                  "\r",
                  "//Keep array of all booking IDs\r",
                  "let bookings = pm.environment.get(\"bookingIds\");\r",
                  "bookings = bookings ? JSON.parse(bookings) : [];\r",
                  "\r",
                  "// Push new booking object into array\r",
                  "bookings.push({ bookingid: res.bookingid});\r",
                  "\r",
                  "// Save updated array back to environment\r",
                  "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                  "\r",
                  "// Also save the single booking ID for chaining\r",
                  "pm.environment.set(\"bookingId\", res.bookingid);\r",
                  "\r",
                  "// Tests\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains bookingid\", function () {\r",
                  "    pm.expect(res).to.have.property(\"bookingid\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Firstname matches request\", function () {\r",
                  "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                  "});\r",
                  "\r",
                  "//Response time\r",
                  "pm.test(\"Response time is below 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  ""
                ],
                "_lastExecutionId": "adec3f86-3651-4ec6-88d5-35f84d7f7d66"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=ef24ee8e0844918",
              "system": true
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1c45aa8e-cedc-4f73-a0e6-39b65cf72c70",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "219",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "209dbf49-b21a-4b65-b776-ff6d7348766a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Length",
              "value": "196"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:21 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"c4-rIoWFQXlUJXzhDqXFlVyXJvAd5I\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=vqZupPrbCGjpZNze08AJheElCyPeeTEk7MS33gpJgM8%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581381\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=vqZupPrbCGjpZNze08AJheElCyPeeTEk7MS33gpJgM8%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581381\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              52,
              49,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              53,
              48,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              48,
              53,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 897,
          "responseSize": 196
        },
        "id": "01f5d0e1-09c6-43a7-b3ad-c58ec1cac88f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains bookingid",
            "skipped": false
          },
          {
            "assertion": "Firstname matches request",
            "skipped": false
          },
          {
            "assertion": "Response time is below 500ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response time is below 500ms",
              "message": "expected 897 to be below 500",
              "stack": "AssertionError: expected 897 to be below 500\n   at Object.eval sandbox-script.js:4:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b02abe55-54e3-4501-b962-e503956bf697",
          "length": 7,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "da0f351c-47b8-45be-b1f1-35e8c25c301e"
        },
        "item": {
          "id": "4347c6ec-8344-4154-bb8f-bba9316f8b2e",
          "name": "Update booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Cookie",
                "value": "token={{token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"firstname\": \"Raj\",\r\n    \"lastname\": \"Malhotra\",\r\n    \"totalprice\": 5000,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-11-01\",\r\n        \"checkout\": \"2025-11-10\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "54ee7399-68e2-44cb-bd95-875732737b4e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let jsonData;\r",
                  "try {\r",
                  "    jsonData = pm.response.json();\r",
                  "} catch (e) {\r",
                  "    pm.test(\"Response is valid JSON\", function () {\r",
                  "        pm.expect.fail(\"Invalid JSON in response\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "//Status code check\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//Compare response to request (if body exists)\r",
                  "if (pm.request.body && pm.request.body.raw) {\r",
                  "    let requestData;\r",
                  "    try {\r",
                  "        requestData = JSON.parse(pm.request.body.raw);\r",
                  "    } catch (e) {\r",
                  "        pm.test(\"Request body is valid JSON\", function () {\r",
                  "            pm.expect.fail(\"Invalid JSON in request body\");\r",
                  "        });\r",
                  "    }\r",
                  "\r",
                  "    pm.test(\"Booking updated matches request\", function () {\r",
                  "        pm.expect(jsonData.firstname).to.eql(requestData.firstname);\r",
                  "        pm.expect(jsonData.lastname).to.eql(requestData.lastname);\r",
                  "        pm.expect(jsonData.totalprice).to.eql(requestData.totalprice);\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "//Direct firstname check without undefined variable\r",
                  "pm.test(\"Firstname matches 'Raj'\", function () {\r",
                  "    pm.expect(jsonData.firstname).to.eql(\"Raj\");\r",
                  "});\r",
                  "\r",
                  "//Response time check\r",
                  "pm.test(\"Response time is below 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "//Performance metrics logging\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  ""
                ],
                "_lastExecutionId": "9bdfd8e1-afa3-4ecb-96bf-2f38cf05d5eb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "2741"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Cookie",
              "value": "token=ef24ee8e0844918",
              "system": true
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ff34c4bd-8766-4c51-8f95-95be93862626",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "243",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"firstname\": \"Raj\",\r\n    \"lastname\": \"Malhotra\",\r\n    \"totalprice\": 5000,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-11-01\",\r\n        \"checkout\": \"2025-11-10\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "e37fccc5-aaaa-4ff2-8075-50b7ae5c254c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:22 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"a9-NQrI8i1IUwUM0PB+6wSoLfdJ8vo\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=JZ3%2FUSUzObOvik6hWIYGnn2CO6gk8FmHATudn6HKl30%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581382\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=JZ3%2FUSUzObOvik6hWIYGnn2CO6gk8FmHATudn6HKl30%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581382\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              97,
              106,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              108,
              104,
              111,
              116,
              114,
              97,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              49,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              49,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              68,
              105,
              110,
              110,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 390,
          "responseSize": 169
        },
        "id": "4347c6ec-8344-4154-bb8f-bba9316f8b2e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Booking updated matches request",
            "skipped": false
          },
          {
            "assertion": "Firstname matches 'Raj'",
            "skipped": false
          },
          {
            "assertion": "Response time is below 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9fad8c0b-25c1-4439-9db1-1307af63ebc7",
          "length": 7,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a04664f2-0d01-443f-a2d0-55cbb259b4c0"
        },
        "item": {
          "id": "409f2982-ff7e-40e6-9137-d9fc3c37b94d",
          "name": "Get All Bookings",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e75d3734-5582-4dd6-92dc-fc3905d59420",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Get bookingId from environment\r",
                  "let bookingId = pm.environment.get(\"bookingId\");\r",
                  "\r",
                  "pm.test(\"Booking ID exists\", () => {\r",
                  "    pm.expect(bookingId).to.not.be.undefined;\r",
                  "    pm.expect(bookingId).to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "// Status code check\r",
                  "pm.test(\"Status code is 200\", () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Response time check\r",
                  "pm.test(\"Response time <500ms\", () => {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  "\r",
                  "// Parse JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// Validate booking object\r",
                  "pm.test(\"Has all booking fields\", () => {\r",
                  "    pm.expect(jsonData).to.have.keys(\r",
                  "        \"firstname\",\r",
                  "        \"lastname\",\r",
                  "        \"totalprice\",\r",
                  "        \"depositpaid\",\r",
                  "        \"bookingdates\",\r",
                  "        \"additionalneeds\"\r",
                  "    );\r",
                  "});\r",
                  "\r",
                  "// Validate bookingdates keys\r",
                  "pm.test(\"Booking dates contain checkin & checkout\", () => {\r",
                  "    pm.expect(jsonData.bookingdates).to.have.keys(\"checkin\", \"checkout\");\r",
                  "});\r",
                  "\r",
                  "// Save booking details for later\r",
                  "pm.environment.set(\"bookingDetails\", JSON.stringify(jsonData));\r",
                  ""
                ],
                "_lastExecutionId": "33f8e3ae-fd22-4f8f-8f42-6ab492bef545"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "2741"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4457372f-08fa-4d90-a14e-5fe2712e8832",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c0abac3b-c926-41c2-8b42-389d7cdc53a6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Length",
              "value": "169"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:23 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"a9-NQrI8i1IUwUM0PB+6wSoLfdJ8vo\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=HBYtMpBTeUywXqTYJcygt58mEgysr4y%2FcMHQn7jrCZE%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581383\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=HBYtMpBTeUywXqTYJcygt58mEgysr4y%2FcMHQn7jrCZE%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581383\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              97,
              106,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              108,
              104,
              111,
              116,
              114,
              97,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              49,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              49,
              49,
              45,
              49,
              48,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              68,
              105,
              110,
              110,
              101,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 339,
          "responseSize": 169
        },
        "id": "409f2982-ff7e-40e6-9137-d9fc3c37b94d",
        "assertions": [
          {
            "assertion": "Booking ID exists",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time <500ms",
            "skipped": false
          },
          {
            "assertion": "Has all booking fields",
            "skipped": false
          },
          {
            "assertion": "Booking dates contain checkin & checkout",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41d6ea4e-1956-4c70-b9a6-0190f9e41341",
          "length": 7,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ee4e0633-d58b-4dde-808f-4122e61027f0"
        },
        "item": {
          "id": "6569eba3-2448-4f9d-8224-ee18af3b4cb4",
          "name": "Delete Request",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{bookingId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4a304c7-6ac6-4095-b3cf-3d149acae6d6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Convert response body to JSON if possible\r",
                  "let responseJson;\r",
                  "try {\r",
                  "    responseJson = pm.response.json();\r",
                  "} catch (e) {\r",
                  "    responseJson = {};\r",
                  "}\r",
                  "\r",
                  "// ‚úÖ Test: Status code is valid (DELETE expected codes)\r",
                  "pm.test(\"Status code is 200, 201, 204\", function () {\r",
                  "    pm.expect([200, 201, 204]).to.include(pm.response.code);\r",
                  "});\r",
                  "\r",
                  "// ‚úÖ Test: Response body is valid for DELETE\r",
                  "pm.test(\"Response is valid for DELETE\", function () {\r",
                  "    const validBodies = [\"\",\"Created\", \"No Content\"];\r",
                  "    pm.expect(validBodies).to.include(pm.response.reason());\r",
                  "});\r",
                  "\r",
                  "// ‚úÖ Test: Booking actually deleted (if status is success)\r",
                  "pm.test(\"Booking deletion confirmation\", function () {\r",
                  "    if ([200, 201, 204].includes(pm.response.code)) {\r",
                  "        pm.expect(pm.response.text()).to.include.oneOf([\"Created\", \"Deleted\", \"No Content\", \"Booking deleted\"]);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ‚úÖ Save deletion status for later\r",
                  "pm.collectionVariables.set(\"lastDeleteStatus\", pm.response.code);\r",
                  ""
                ],
                "_lastExecutionId": "de645924-3fff-497d-98ce-fb26cd31e56a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking",
              "2741"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Cookie",
              "value": "token=ef24ee8e0844918",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ce41cbb-f3f7-4e84-ba9f-e8699e9b5b60",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e67167f1-81d3-4ef2-a4ae-19cfb9f15188",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Content-Length",
              "value": "7"
            },
            {
              "key": "Content-Type",
              "value": "text/plain; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:23 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"7-rM9AyJuqT6iOan/xHh+AW+7K/T8\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=HBYtMpBTeUywXqTYJcygt58mEgysr4y%2FcMHQn7jrCZE%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581383\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=HBYtMpBTeUywXqTYJcygt58mEgysr4y%2FcMHQn7jrCZE%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581383\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              67,
              114,
              101,
              97,
              116,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 242,
          "responseSize": 7
        },
        "id": "6569eba3-2448-4f9d-8224-ee18af3b4cb4",
        "assertions": [
          {
            "assertion": "Status code is 200, 201, 204",
            "skipped": false
          },
          {
            "assertion": "Response is valid for DELETE",
            "skipped": false
          },
          {
            "assertion": "Booking deletion confirmation",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "51243298-e42a-4422-a9ab-6ed6fe8d010c",
          "length": 7,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "efe18e89-625b-44b4-89ca-186727bdb175"
        },
        "item": {
          "id": "1430c6f6-393f-4f3b-bba8-fd51d33f97f1",
          "name": "Create booking again",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "00970117-e695-4ff6-baaf-1e326fc21a6c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the response\r",
                  "let res = pm.response.json();\r",
                  "\r",
                  "//Keep array of all booking IDs\r",
                  "let bookings = pm.environment.get(\"bookingIds\");\r",
                  "bookings = bookings ? JSON.parse(bookings) : [];\r",
                  "\r",
                  "// Push new booking object into array\r",
                  "bookings.push({ bookingid: res.bookingid});\r",
                  "\r",
                  "// Save updated array back to environment\r",
                  "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                  "\r",
                  "//Also save the single booking ID for chaining\r",
                  "pm.environment.set(\"bookingId\", res.bookingid);\r",
                  "\r",
                  "// Tests\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains bookingid\", function () {\r",
                  "    pm.expect(res).to.have.property(\"bookingid\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Firstname matches request\", function () {\r",
                  "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                  "});\r",
                  "\r",
                  "//Response time\r",
                  "pm.test(\"Response time is below 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  ""
                ],
                "_lastExecutionId": "7bba4030-0552-4ce2-8b5b-54ee3e054dac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "booking"
            ],
            "host": [
              "restful-booker",
              "herokuapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df3688c2-4c90-460b-9bda-84ca215e615d",
              "system": true
            },
            {
              "key": "Host",
              "value": "restful-booker.herokuapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "219",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "7f578cf3-bc25-49b9-93f3-27db31c01c9f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Length",
              "value": "196"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Sat, 30 Aug 2025 19:16:24 GMT"
            },
            {
              "key": "Etag",
              "value": "W/\"c4-M3iArv2OWvxFIMK3P5fb18uxBd0\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=TjymL7ybU1H2Yj2BJ5f89m3ZwtaRsWTDEOrPkzWr8Sw%3D\\u0026sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add\\u0026ts=1756581384\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=TjymL7ybU1H2Yj2BJ5f89m3ZwtaRsWTDEOrPkzWr8Sw%3D&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&ts=1756581384\""
            },
            {
              "key": "Server",
              "value": "Heroku"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              105,
              100,
              34,
              58,
              50,
              55,
              54,
              52,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              111,
              101,
              34,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              112,
              114,
              105,
              99,
              101,
              34,
              58,
              49,
              53,
              48,
              44,
              34,
              100,
              101,
              112,
              111,
              115,
              105,
              116,
              112,
              97,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              98,
              111,
              111,
              107,
              105,
              110,
              103,
              100,
              97,
              116,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              104,
              101,
              99,
              107,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              48,
              49,
              34,
              44,
              34,
              99,
              104,
              101,
              99,
              107,
              111,
              117,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              57,
              45,
              48,
              53,
              34,
              125,
              44,
              34,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              110,
              101,
              101,
              100,
              115,
              34,
              58,
              34,
              66,
              114,
              101,
              97,
              107,
              102,
              97,
              115,
              116,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 310,
          "responseSize": 196
        },
        "id": "1430c6f6-393f-4f3b-bba8-fd51d33f97f1",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains bookingid",
            "skipped": false
          },
          {
            "assertion": "Firstname matches request",
            "skipped": false
          },
          {
            "assertion": "Response time is below 500ms",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 792
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is below 500ms",
          "message": "expected 1515 to be below 500",
          "stack": "AssertionError: expected 1515 to be below 500\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "b4a941424d9560a3482e250d64f5fb35",
          "id": "425485c0-5d1a-4222-b61c-a204df98a10d",
          "timestamp": 1756581380599,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d858b455-a32a-49e4-bf24-b2f776176a73",
          "name": "POST Auth - Generate Token",
          "request": {
            "url": {
              "path": [
                "auth"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1a8969bb-e09e-488c-9763-c363db8a3b86",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//Parse JSON response\r",
                  "var jsonData = pm.response.json();\r",
                  "\r",
                  "//T1: Status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "//T2: Response time\r",
                  "pm.test(\"Response time is below 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  "\r",
                  "//T3: Token exists and is not empty\r",
                  "pm.test(\"Token is present\", function () {\r",
                  "    pm.expect(jsonData.token).to.not.be.undefined;\r",
                  "    pm.expect(jsonData.token).to.not.be.empty;\r",
                  "});\r",
                  "\r",
                  "//T4: Content type is JSON\r",
                  "pm.test(\"Content-Type contains application/json\", function () {\r",
                  "    const contentType = pm.response.headers.get(\"Content-Type\");\r",
                  "    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
                  "});\r",
                  "\r",
                  "// T5: Save token to environment variable\r",
                  "if (jsonData.token) {\r",
                  "    pm.environment.set(\"token\", jsonData.token);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "5a7a2fce-86ab-4101-83c0-a1d9fe8856f8"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "02b56875-d067-418d-9bd2-f13efb822016",
            "exporter_id": "38999135",
            "collection_link": "https://www.postman.com/rsdolly03/workspace/hotel-booking-api-testing/collection/38999135-02b56875-d067-418d-9bd2-f13efb822016?action=share&source=collection_link&creator=38999135"
          },
          "item": [
            {
              "id": "d858b455-a32a-49e4-bf24-b2f776176a73",
              "name": "POST Auth - Generate Token",
              "request": {
                "url": {
                  "path": [
                    "auth"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a8969bb-e09e-488c-9763-c363db8a3b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Parse JSON response\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//T1: Status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//T2: Response time\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      "\r",
                      "//T3: Token exists and is not empty\r",
                      "pm.test(\"Token is present\", function () {\r",
                      "    pm.expect(jsonData.token).to.not.be.undefined;\r",
                      "    pm.expect(jsonData.token).to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "//T4: Content type is JSON\r",
                      "pm.test(\"Content-Type contains application/json\", function () {\r",
                      "    const contentType = pm.response.headers.get(\"Content-Type\");\r",
                      "    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// T5: Save token to environment variable\r",
                      "if (jsonData.token) {\r",
                      "    pm.environment.set(\"token\", jsonData.token);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7a2fce-86ab-4101-83c0-a1d9fe8856f8"
                  }
                }
              ]
            },
            {
              "id": "d81a405b-e0d6-476d-8f18-27f0c8b07b46",
              "name": "POST Auth - Invalid Credentials",
              "request": {
                "url": {
                  "path": [
                    "auth"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "55f95ae9-7624-49f9-b1d2-96d2b47fa4ee",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// ‚ùå Expect 200 but with error message (API design choice)\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Reason key exists and is 'Bad credentials'\", function () {\r",
                      "    pm.expect(jsonData.reason).to.eql(\"Bad credentials\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "123367b4-076c-42f7-9861-275974203869"
                  }
                }
              ]
            },
            {
              "id": "01f5d0e1-09c6-43a7-b3ad-c58ec1cac88f",
              "name": "Create booking",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "token={{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "281d5f55-ae0b-408e-b072-bff6b12a22d9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the response\r",
                      "let res = pm.response.json();\r",
                      "\r",
                      "//Keep array of all booking IDs\r",
                      "let bookings = pm.environment.get(\"bookingIds\");\r",
                      "bookings = bookings ? JSON.parse(bookings) : [];\r",
                      "\r",
                      "// Push new booking object into array\r",
                      "bookings.push({ bookingid: res.bookingid});\r",
                      "\r",
                      "// Save updated array back to environment\r",
                      "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                      "\r",
                      "// Also save the single booking ID for chaining\r",
                      "pm.environment.set(\"bookingId\", res.bookingid);\r",
                      "\r",
                      "// Tests\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains bookingid\", function () {\r",
                      "    pm.expect(res).to.have.property(\"bookingid\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Firstname matches request\", function () {\r",
                      "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                      "});\r",
                      "\r",
                      "//Response time\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      ""
                    ],
                    "_lastExecutionId": "adec3f86-3651-4ec6-88d5-35f84d7f7d66"
                  }
                }
              ]
            },
            {
              "id": "4347c6ec-8344-4154-bb8f-bba9316f8b2e",
              "name": "Update booking",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Cookie",
                    "value": "token={{token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\": \"Raj\",\r\n    \"lastname\": \"Malhotra\",\r\n    \"totalprice\": 5000,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-11-01\",\r\n        \"checkout\": \"2025-11-10\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54ee7399-68e2-44cb-bd95-875732737b4e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let jsonData;\r",
                      "try {\r",
                      "    jsonData = pm.response.json();\r",
                      "} catch (e) {\r",
                      "    pm.test(\"Response is valid JSON\", function () {\r",
                      "        pm.expect.fail(\"Invalid JSON in response\");\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "//Status code check\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Compare response to request (if body exists)\r",
                      "if (pm.request.body && pm.request.body.raw) {\r",
                      "    let requestData;\r",
                      "    try {\r",
                      "        requestData = JSON.parse(pm.request.body.raw);\r",
                      "    } catch (e) {\r",
                      "        pm.test(\"Request body is valid JSON\", function () {\r",
                      "            pm.expect.fail(\"Invalid JSON in request body\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    pm.test(\"Booking updated matches request\", function () {\r",
                      "        pm.expect(jsonData.firstname).to.eql(requestData.firstname);\r",
                      "        pm.expect(jsonData.lastname).to.eql(requestData.lastname);\r",
                      "        pm.expect(jsonData.totalprice).to.eql(requestData.totalprice);\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "//Direct firstname check without undefined variable\r",
                      "pm.test(\"Firstname matches 'Raj'\", function () {\r",
                      "    pm.expect(jsonData.firstname).to.eql(\"Raj\");\r",
                      "});\r",
                      "\r",
                      "//Response time check\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "//Performance metrics logging\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      ""
                    ],
                    "_lastExecutionId": "9bdfd8e1-afa3-4ecb-96bf-2f38cf05d5eb"
                  }
                }
              ]
            },
            {
              "id": "409f2982-ff7e-40e6-9137-d9fc3c37b94d",
              "name": "Get All Bookings",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e75d3734-5582-4dd6-92dc-fc3905d59420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Get bookingId from environment\r",
                      "let bookingId = pm.environment.get(\"bookingId\");\r",
                      "\r",
                      "pm.test(\"Booking ID exists\", () => {\r",
                      "    pm.expect(bookingId).to.not.be.undefined;\r",
                      "    pm.expect(bookingId).to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "// Status code check\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Response time check\r",
                      "pm.test(\"Response time <500ms\", () => {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      "\r",
                      "// Parse JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate booking object\r",
                      "pm.test(\"Has all booking fields\", () => {\r",
                      "    pm.expect(jsonData).to.have.keys(\r",
                      "        \"firstname\",\r",
                      "        \"lastname\",\r",
                      "        \"totalprice\",\r",
                      "        \"depositpaid\",\r",
                      "        \"bookingdates\",\r",
                      "        \"additionalneeds\"\r",
                      "    );\r",
                      "});\r",
                      "\r",
                      "// Validate bookingdates keys\r",
                      "pm.test(\"Booking dates contain checkin & checkout\", () => {\r",
                      "    pm.expect(jsonData.bookingdates).to.have.keys(\"checkin\", \"checkout\");\r",
                      "});\r",
                      "\r",
                      "// Save booking details for later\r",
                      "pm.environment.set(\"bookingDetails\", JSON.stringify(jsonData));\r",
                      ""
                    ],
                    "_lastExecutionId": "33f8e3ae-fd22-4f8f-8f42-6ab492bef545"
                  }
                }
              ]
            },
            {
              "id": "6569eba3-2448-4f9d-8224-ee18af3b4cb4",
              "name": "Delete Request",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "token={{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4a304c7-6ac6-4095-b3cf-3d149acae6d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Convert response body to JSON if possible\r",
                      "let responseJson;\r",
                      "try {\r",
                      "    responseJson = pm.response.json();\r",
                      "} catch (e) {\r",
                      "    responseJson = {};\r",
                      "}\r",
                      "\r",
                      "// ‚úÖ Test: Status code is valid (DELETE expected codes)\r",
                      "pm.test(\"Status code is 200, 201, 204\", function () {\r",
                      "    pm.expect([200, 201, 204]).to.include(pm.response.code);\r",
                      "});\r",
                      "\r",
                      "// ‚úÖ Test: Response body is valid for DELETE\r",
                      "pm.test(\"Response is valid for DELETE\", function () {\r",
                      "    const validBodies = [\"\",\"Created\", \"No Content\"];\r",
                      "    pm.expect(validBodies).to.include(pm.response.reason());\r",
                      "});\r",
                      "\r",
                      "// ‚úÖ Test: Booking actually deleted (if status is success)\r",
                      "pm.test(\"Booking deletion confirmation\", function () {\r",
                      "    if ([200, 201, 204].includes(pm.response.code)) {\r",
                      "        pm.expect(pm.response.text()).to.include.oneOf([\"Created\", \"Deleted\", \"No Content\", \"Booking deleted\"]);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ‚úÖ Save deletion status for later\r",
                      "pm.collectionVariables.set(\"lastDeleteStatus\", pm.response.code);\r",
                      ""
                    ],
                    "_lastExecutionId": "de645924-3fff-497d-98ce-fb26cd31e56a"
                  }
                }
              ]
            },
            {
              "id": "1430c6f6-393f-4f3b-bba8-fd51d33f97f1",
              "name": "Create booking again",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "00970117-e695-4ff6-baaf-1e326fc21a6c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the response\r",
                      "let res = pm.response.json();\r",
                      "\r",
                      "//Keep array of all booking IDs\r",
                      "let bookings = pm.environment.get(\"bookingIds\");\r",
                      "bookings = bookings ? JSON.parse(bookings) : [];\r",
                      "\r",
                      "// Push new booking object into array\r",
                      "bookings.push({ bookingid: res.bookingid});\r",
                      "\r",
                      "// Save updated array back to environment\r",
                      "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                      "\r",
                      "//Also save the single booking ID for chaining\r",
                      "pm.environment.set(\"bookingId\", res.bookingid);\r",
                      "\r",
                      "// Tests\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains bookingid\", function () {\r",
                      "    pm.expect(res).to.have.property(\"bookingid\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Firstname matches request\", function () {\r",
                      "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                      "});\r",
                      "\r",
                      "//Response time\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      ""
                    ],
                    "_lastExecutionId": "7bba4030-0552-4ce2-8b5b-54ee3e054dac"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "lastDeleteStatus"
            }
          ],
          "info": {
            "_postman_id": "02b56875-d067-418d-9bd2-f13efb822016",
            "name": "Restful Booker Test Suite",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "API Test Suite for Hotel Booking System using Restful Booker API.  \nCovers authentication, CRUD operations, error handling, and performance checks.",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 7,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0dd60d16-ca21-4e14-a0d9-a6dcf64297fb",
          "httpRequestId": "8c3f99b2-3333-4890-9231-86c8a2c1bebd",
          "scriptId": "1a8969bb-e09e-488c-9763-c363db8a3b86",
          "execution": "5a7a2fce-86ab-4101-83c0-a1d9fe8856f8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response time is below 500ms",
          "message": "expected 897 to be below 500",
          "stack": "AssertionError: expected 897 to be below 500\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "57b90b92a5c8c6a071a9354002972969",
          "id": "a4417ead-793e-4f1e-ac5b-cb14fb9f86cb",
          "timestamp": 1756581381914,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "01f5d0e1-09c6-43a7-b3ad-c58ec1cac88f",
          "name": "Create booking",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Cookie",
                "value": "token={{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "281d5f55-ae0b-408e-b072-bff6b12a22d9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the response\r",
                  "let res = pm.response.json();\r",
                  "\r",
                  "//Keep array of all booking IDs\r",
                  "let bookings = pm.environment.get(\"bookingIds\");\r",
                  "bookings = bookings ? JSON.parse(bookings) : [];\r",
                  "\r",
                  "// Push new booking object into array\r",
                  "bookings.push({ bookingid: res.bookingid});\r",
                  "\r",
                  "// Save updated array back to environment\r",
                  "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                  "\r",
                  "// Also save the single booking ID for chaining\r",
                  "pm.environment.set(\"bookingId\", res.bookingid);\r",
                  "\r",
                  "// Tests\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains bookingid\", function () {\r",
                  "    pm.expect(res).to.have.property(\"bookingid\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Firstname matches request\", function () {\r",
                  "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                  "});\r",
                  "\r",
                  "//Response time\r",
                  "pm.test(\"Response time is below 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "let metrics = {\r",
                  "    time: pm.response.responseTime,\r",
                  "    size: pm.response.responseSize\r",
                  "};\r",
                  "console.log(\"Performance metrics:\", metrics);\r",
                  ""
                ],
                "_lastExecutionId": "adec3f86-3651-4ec6-88d5-35f84d7f7d66"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "02b56875-d067-418d-9bd2-f13efb822016",
            "exporter_id": "38999135",
            "collection_link": "https://www.postman.com/rsdolly03/workspace/hotel-booking-api-testing/collection/38999135-02b56875-d067-418d-9bd2-f13efb822016?action=share&source=collection_link&creator=38999135"
          },
          "item": [
            {
              "id": "d858b455-a32a-49e4-bf24-b2f776176a73",
              "name": "POST Auth - Generate Token",
              "request": {
                "url": {
                  "path": [
                    "auth"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1a8969bb-e09e-488c-9763-c363db8a3b86",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//Parse JSON response\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//T1: Status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//T2: Response time\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      "\r",
                      "//T3: Token exists and is not empty\r",
                      "pm.test(\"Token is present\", function () {\r",
                      "    pm.expect(jsonData.token).to.not.be.undefined;\r",
                      "    pm.expect(jsonData.token).to.not.be.empty;\r",
                      "});\r",
                      "\r",
                      "//T4: Content type is JSON\r",
                      "pm.test(\"Content-Type contains application/json\", function () {\r",
                      "    const contentType = pm.response.headers.get(\"Content-Type\");\r",
                      "    pm.expect(contentType.toLowerCase()).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "// T5: Save token to environment variable\r",
                      "if (jsonData.token) {\r",
                      "    pm.environment.set(\"token\", jsonData.token);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "5a7a2fce-86ab-4101-83c0-a1d9fe8856f8"
                  }
                }
              ]
            },
            {
              "id": "d81a405b-e0d6-476d-8f18-27f0c8b07b46",
              "name": "POST Auth - Invalid Credentials",
              "request": {
                "url": {
                  "path": [
                    "auth"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "55f95ae9-7624-49f9-b1d2-96d2b47fa4ee",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "// ‚ùå Expect 200 but with error message (API design choice)\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Reason key exists and is 'Bad credentials'\", function () {\r",
                      "    pm.expect(jsonData.reason).to.eql(\"Bad credentials\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "123367b4-076c-42f7-9861-275974203869"
                  }
                }
              ]
            },
            {
              "id": "01f5d0e1-09c6-43a7-b3ad-c58ec1cac88f",
              "name": "Create booking",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "token={{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "281d5f55-ae0b-408e-b072-bff6b12a22d9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the response\r",
                      "let res = pm.response.json();\r",
                      "\r",
                      "//Keep array of all booking IDs\r",
                      "let bookings = pm.environment.get(\"bookingIds\");\r",
                      "bookings = bookings ? JSON.parse(bookings) : [];\r",
                      "\r",
                      "// Push new booking object into array\r",
                      "bookings.push({ bookingid: res.bookingid});\r",
                      "\r",
                      "// Save updated array back to environment\r",
                      "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                      "\r",
                      "// Also save the single booking ID for chaining\r",
                      "pm.environment.set(\"bookingId\", res.bookingid);\r",
                      "\r",
                      "// Tests\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains bookingid\", function () {\r",
                      "    pm.expect(res).to.have.property(\"bookingid\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Firstname matches request\", function () {\r",
                      "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                      "});\r",
                      "\r",
                      "//Response time\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      ""
                    ],
                    "_lastExecutionId": "adec3f86-3651-4ec6-88d5-35f84d7f7d66"
                  }
                }
              ]
            },
            {
              "id": "4347c6ec-8344-4154-bb8f-bba9316f8b2e",
              "name": "Update booking",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Cookie",
                    "value": "token={{token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"firstname\": \"Raj\",\r\n    \"lastname\": \"Malhotra\",\r\n    \"totalprice\": 5000,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2025-11-01\",\r\n        \"checkout\": \"2025-11-10\"\r\n    },\r\n    \"additionalneeds\": \"Dinner\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "54ee7399-68e2-44cb-bd95-875732737b4e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let jsonData;\r",
                      "try {\r",
                      "    jsonData = pm.response.json();\r",
                      "} catch (e) {\r",
                      "    pm.test(\"Response is valid JSON\", function () {\r",
                      "        pm.expect.fail(\"Invalid JSON in response\");\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "//Status code check\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "//Compare response to request (if body exists)\r",
                      "if (pm.request.body && pm.request.body.raw) {\r",
                      "    let requestData;\r",
                      "    try {\r",
                      "        requestData = JSON.parse(pm.request.body.raw);\r",
                      "    } catch (e) {\r",
                      "        pm.test(\"Request body is valid JSON\", function () {\r",
                      "            pm.expect.fail(\"Invalid JSON in request body\");\r",
                      "        });\r",
                      "    }\r",
                      "\r",
                      "    pm.test(\"Booking updated matches request\", function () {\r",
                      "        pm.expect(jsonData.firstname).to.eql(requestData.firstname);\r",
                      "        pm.expect(jsonData.lastname).to.eql(requestData.lastname);\r",
                      "        pm.expect(jsonData.totalprice).to.eql(requestData.totalprice);\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "//Direct firstname check without undefined variable\r",
                      "pm.test(\"Firstname matches 'Raj'\", function () {\r",
                      "    pm.expect(jsonData.firstname).to.eql(\"Raj\");\r",
                      "});\r",
                      "\r",
                      "//Response time check\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "//Performance metrics logging\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      ""
                    ],
                    "_lastExecutionId": "9bdfd8e1-afa3-4ecb-96bf-2f38cf05d5eb"
                  }
                }
              ]
            },
            {
              "id": "409f2982-ff7e-40e6-9137-d9fc3c37b94d",
              "name": "Get All Bookings",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e75d3734-5582-4dd6-92dc-fc3905d59420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Get bookingId from environment\r",
                      "let bookingId = pm.environment.get(\"bookingId\");\r",
                      "\r",
                      "pm.test(\"Booking ID exists\", () => {\r",
                      "    pm.expect(bookingId).to.not.be.undefined;\r",
                      "    pm.expect(bookingId).to.not.be.null;\r",
                      "});\r",
                      "\r",
                      "// Status code check\r",
                      "pm.test(\"Status code is 200\", () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Response time check\r",
                      "pm.test(\"Response time <500ms\", () => {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      "\r",
                      "// Parse JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate booking object\r",
                      "pm.test(\"Has all booking fields\", () => {\r",
                      "    pm.expect(jsonData).to.have.keys(\r",
                      "        \"firstname\",\r",
                      "        \"lastname\",\r",
                      "        \"totalprice\",\r",
                      "        \"depositpaid\",\r",
                      "        \"bookingdates\",\r",
                      "        \"additionalneeds\"\r",
                      "    );\r",
                      "});\r",
                      "\r",
                      "// Validate bookingdates keys\r",
                      "pm.test(\"Booking dates contain checkin & checkout\", () => {\r",
                      "    pm.expect(jsonData.bookingdates).to.have.keys(\"checkin\", \"checkout\");\r",
                      "});\r",
                      "\r",
                      "// Save booking details for later\r",
                      "pm.environment.set(\"bookingDetails\", JSON.stringify(jsonData));\r",
                      ""
                    ],
                    "_lastExecutionId": "33f8e3ae-fd22-4f8f-8f42-6ab492bef545"
                  }
                }
              ]
            },
            {
              "id": "6569eba3-2448-4f9d-8224-ee18af3b4cb4",
              "name": "Delete Request",
              "request": {
                "url": {
                  "path": [
                    "booking",
                    "{{bookingId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Cookie",
                    "value": "token={{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a4a304c7-6ac6-4095-b3cf-3d149acae6d6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Convert response body to JSON if possible\r",
                      "let responseJson;\r",
                      "try {\r",
                      "    responseJson = pm.response.json();\r",
                      "} catch (e) {\r",
                      "    responseJson = {};\r",
                      "}\r",
                      "\r",
                      "// ‚úÖ Test: Status code is valid (DELETE expected codes)\r",
                      "pm.test(\"Status code is 200, 201, 204\", function () {\r",
                      "    pm.expect([200, 201, 204]).to.include(pm.response.code);\r",
                      "});\r",
                      "\r",
                      "// ‚úÖ Test: Response body is valid for DELETE\r",
                      "pm.test(\"Response is valid for DELETE\", function () {\r",
                      "    const validBodies = [\"\",\"Created\", \"No Content\"];\r",
                      "    pm.expect(validBodies).to.include(pm.response.reason());\r",
                      "});\r",
                      "\r",
                      "// ‚úÖ Test: Booking actually deleted (if status is success)\r",
                      "pm.test(\"Booking deletion confirmation\", function () {\r",
                      "    if ([200, 201, 204].includes(pm.response.code)) {\r",
                      "        pm.expect(pm.response.text()).to.include.oneOf([\"Created\", \"Deleted\", \"No Content\", \"Booking deleted\"]);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ‚úÖ Save deletion status for later\r",
                      "pm.collectionVariables.set(\"lastDeleteStatus\", pm.response.code);\r",
                      ""
                    ],
                    "_lastExecutionId": "de645924-3fff-497d-98ce-fb26cd31e56a"
                  }
                }
              ]
            },
            {
              "id": "1430c6f6-393f-4f3b-bba8-fd51d33f97f1",
              "name": "Create booking again",
              "request": {
                "url": {
                  "path": [
                    "booking"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstname\": \"John\",\r\n  \"lastname\": \"Doe\",\r\n  \"totalprice\": 150,\r\n  \"depositpaid\": true,\r\n  \"bookingdates\": {\r\n    \"checkin\": \"2025-09-01\",\r\n    \"checkout\": \"2025-09-05\"\r\n  },\r\n  \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "00970117-e695-4ff6-baaf-1e326fc21a6c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the response\r",
                      "let res = pm.response.json();\r",
                      "\r",
                      "//Keep array of all booking IDs\r",
                      "let bookings = pm.environment.get(\"bookingIds\");\r",
                      "bookings = bookings ? JSON.parse(bookings) : [];\r",
                      "\r",
                      "// Push new booking object into array\r",
                      "bookings.push({ bookingid: res.bookingid});\r",
                      "\r",
                      "// Save updated array back to environment\r",
                      "pm.environment.set(\"bookingIds\", JSON.stringify(bookings));\r",
                      "\r",
                      "//Also save the single booking ID for chaining\r",
                      "pm.environment.set(\"bookingId\", res.bookingid);\r",
                      "\r",
                      "// Tests\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response contains bookingid\", function () {\r",
                      "    pm.expect(res).to.have.property(\"bookingid\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Firstname matches request\", function () {\r",
                      "    pm.expect(res.booking.firstname).to.eql(\"John\");\r",
                      "});\r",
                      "\r",
                      "//Response time\r",
                      "pm.test(\"Response time is below 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "let metrics = {\r",
                      "    time: pm.response.responseTime,\r",
                      "    size: pm.response.responseSize\r",
                      "};\r",
                      "console.log(\"Performance metrics:\", metrics);\r",
                      ""
                    ],
                    "_lastExecutionId": "7bba4030-0552-4ce2-8b5b-54ee3e054dac"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "any",
              "value": "",
              "key": "lastDeleteStatus"
            }
          ],
          "info": {
            "_postman_id": "02b56875-d067-418d-9bd2-f13efb822016",
            "name": "Restful Booker Test Suite",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "API Test Suite for Hotel Booking System using Restful Booker API.  \nCovers authentication, CRUD operations, error handling, and performance checks.",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "ref": "e1adb504-4743-48bd-92a4-0604de198045",
          "length": 7,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "03e0433e-d80a-49b3-8e4c-bca4f6baa677",
          "scriptId": "281d5f55-ae0b-408e-b072-bff6b12a22d9",
          "execution": "adec3f86-3651-4ec6-88d5-35f84d7f7d66"
        }
      }
    ],
    "error": null
  }
}